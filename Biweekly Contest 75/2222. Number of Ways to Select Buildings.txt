Problem Link:- https://leetcode.com/contest/biweekly-contest-75/problems/number-of-ways-to-select-buildings/ [Medium]



solution:-

class Solution {
public:
    long long dp[100000][4][3];

    long long  f(string &s ,int i,int prev,int n){

        if(n==3){   // we got one string
            return 1;  
        }

        if(i==s.size()){   //reaches end
            return 0;
        }

        if(dp[i][n][prev]!=-1){   // if present return answer
            return dp[i][n][prev];
        } 

        if(n==0){   //is size is zero can pick this or can leave

            if(s[i]=='1'){ 
   
                return dp[i][n][prev]=f(s,i+1,1,n+1)+f(s,i+1,prev,n);    // first we are pikcing and second we are not picking 
            
		}else{

                return dp[i][n][prev]=f(s,i+1,0,n+1)+f(s,i+1,prev,n);    // first we are pikcing and second we are not picking 
            
		}
        }


	// is size is greater then 1
	// check previous one


        if(prev==1){   // if prev building is 1

            if(s[i]=='0'){   //if current building is 0 we can take it or skip it 
                 return dp[i][n][prev]=f(s,i+1,0,n+1)+f(s,i+1,prev,n);
            }
		else{    //if current building is 1 we have to skip it 
                return dp[i][n][prev]=f(s,i+1,prev,n);
            }
        }

        else if(prev==0){    // if prev building is 0

            if(s[i]=='1'){   //if current building is 1 we can take it or skip it
                return dp[i][n][prev]=f(s,i+1,1,n+1)+f(s,i+1,prev,n);
            }
		else{       //if current building is 0 we have to skip it 
                return dp[i][n][prev]=f(s,i+1,prev,n);
            }
        }
        return 0;
    }
    long long numberOfWays(string s) {

        memset(dp,-1,sizeof(dp));
        return f(s,0,0,0);   // final answer
    }

};
